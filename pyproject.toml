[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
authors = [
  { name = "ticdenis", email = "navarrodenis940503@outlook.com" },
  { name = "yasti4", email = "adria_4_@hotmail.com" },
]
maintainers = [
  { name = "ticdenis", email = "navarrodenis940503@outlook.com" }
]
classifiers = [
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = []
description = "Async Python DDD utilities library."
dynamic = ["version"]
keywords = ["ddd", "hexagonal", "cqrs", "aio", "async"]
license = { text = "MIT" }
name = "aioddd"
readme = "README.md"
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
  "pre-commit>=3.8.0",
  "tomli>=2.0.1",
  "types-backports>=0.1.3",
  "types-toml>=0.10.8.20240310",
]
deploy = [
  "build>=1.2.2",
  "setuptools>=75.1.0",
  "twine>=5.1.1",
  "wheel>=0.44.0",
]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.5.37",
]
fmt = [
  "black>=24.8.0",
  "isort>=5.13.2",
]
security-analysis = [
  "bandit>=1.7.4",
  "liccheck>=0.9.2",
  "setuptools>=75.1.0", # https://github.com/dhatim/python-license-check/issues/114
]
static-analysis = [
  "mypy>=1.11.2",
  "pylint>=3.3.1",
]
test = [
  "nest-asyncio>=1.6.0",
  "psutil>=6.0.0",
  "pytest>=8.3.3",
  "pytest-asyncio>=0.24.0",
  "pytest-cov>=5.0.0",
  "pytest-xdist>=3.6.1",
]

[project.urls]
"documentation" = "https://aiopy.github.io/python-aioddd/"
"repository" = "https://github.com/aiopy/python-aioddd"

[tool.setuptools.dynamic]
version = { attr = "aioddd.__version__" }

[tool.setuptools.packages.find]
include = ["aioddd*"]

[tool.setuptools.package-data]
"aioddd" = ["py.typed"]

[tool.bandit]
exclude_dirs = ["docs", "docs_src", "var"]
skips = ["B101", "B311"]

[tool.black]
include = '\.pyi?$'
line-length = 120
skip-string-normalization = true

[tool.coverage.paths]
source = ["aioddd"]
[tool.coverage.run]
data_file = "var/coverage/.coverage"
disable_warnings = ["no-data-collected"]
source = ["tests"]
[tool.coverage.report]
fail_under = 70
[tool.coverage.html]
directory = "var/coverage"

[tool.isort]
profile = "black"

[tool.liccheck]
authorized_licenses = []
no_deps = true
dependencies = true

[tool.mypy]
strict = true
cache_dir = "var/mypy"

[tool.pylint.master]
jobs = "0"
[tool.pylint.messages_control]
disable = "C0103,C0114,C0115,C0116,C0205,C0209,C0301,E0401,E0611,E1135,E1136,R0801,R0903,R0913,R1704,R1725,W0108,W0212,W0235,W0236,W0603,W0611,W0622,W0707,W1202"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
cache_dir = "var/pytest"
addopts = "-q -n auto -p no:warnings --no-cov-on-fail"
testpaths = ["tests"]

[tool.run-script]
install = "python3 -m pip install ."
dev-install = "python3 -m pip install .[dev,deploy,docs,fmt,security-analysis,static-analysis,test]"
deploy = "python3 -m build --no-isolation --wheel --sdist && python3 -m twine upload dist/*"
docs = "python3 -m mkdocs build -f docs_src/config/en/mkdocs.yml && python3 -m mkdocs build -f docs_src/config/es/mkdocs.yml"
dev-docs = "python3 -m mkdocs serve -f docs_src/config/en/mkdocs.yml"
fmt = "python3 -m black aioddd tests && python3 -m isort aioddd tests"
security-analysis = "python3 -m liccheck && python3 -m bandit -r . -c pyproject.toml"
static-analysis = "python3 -m mypy aioddd && python3 -m pylint aioddd"
test = "python3 -m pytest"
unit-tests = "python3 -m pytest tests/unit"
integration-tests = "python3 -m pytest tests/integration"
functional-tests = "python3 -m pytest tests/functional"
coverage = "python3 -m pytest --cov --cov-report=html"
clean = """python3 -c \"
from glob import iglob
from shutil import rmtree

for pathname in ['./build', './*.egg-info', './dist', './var', '**/__pycache__']:
  for path in iglob(pathname, recursive=True):
    rmtree(path, ignore_errors=True)
\""""
check-dependency-update = """python3 -c \"
from contextlib import suppress
from json import loads
from re import match
try:
    from tomllib import load  # Python 3.11+
except ModuleNotFoundError:
    try:
        from tomli import load
    except ModuleNotFoundError:
        from subprocess import run
        run(['python3 -m pip install -U tomli'], stdout=-3, shell=True)
        from tomli import load
from urllib.request import urlopen

def get_latest_version(package_name, pypi_url = 'https://pypi.org'):
    with suppress(Exception), urlopen(f'{pypi_url}/pypi/{package_name}/json') as res:
        return loads(res.read().decode()).get('info', {}).get('version')

def parse_dependency(dep):
    result = match(r'([a-zA-Z0-9_-]+)(\\[.*\\])?(?:([<>=!~]+)(.+))?', dep)
    return result.groups() if result else (dep, '', '', '')

def compare_deps(deps):
    for pkg, extras, op, ver in [parse_dependency(dep) for dep in deps]:
        if pkg and op and ver and (last := get_latest_version(pkg)):
            if (op == '==' and ver != last) or (op == '>=' and last > ver) or (op == '<=' and last < ver):
                yield (pkg + (extras or '') + ' (Current: ' + ver + ', Latest: ' + last + ')')

with open('pyproject.toml', 'rb') as f:
    pyproject = load(f).get('project', {})
    deps = compare_deps(pyproject.get('dependencies', []))
    opt_deps = {group: compare_deps(deps) for group, deps in pyproject.get('optional-dependencies', {}).items()}
    parsed_deps = '\\n'.join(deps)
    parsed_opt_deps = [(f'[{opt_dep_group}]\\n', '\\n'.join(opt_deps[opt_dep_group])) for opt_dep_group in opt_deps]
    if not parsed_deps and not (''.join([v for _, v in parsed_opt_deps])):
        print('Already up-to-date.')
    else:
        print('# pyproject.toml\\n[project.dependencies]\\n{0}\\n[project.optional-dependencies]{1}'.format(parsed_deps, ''.join([k + v for k, v in parsed_opt_deps])))
        exit(1)
\""""
